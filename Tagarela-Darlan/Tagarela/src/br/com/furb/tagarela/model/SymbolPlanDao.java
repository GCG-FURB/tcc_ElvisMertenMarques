package br.com.furb.tagarela.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import br.com.furb.tagarela.model.SymbolPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SYMBOL_PLAN.
*/
public class SymbolPlanDao extends AbstractDao<SymbolPlan, Long> {

    public static final String TABLENAME = "SYMBOL_PLAN";

    /**
     * Properties of entity SymbolPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ServerID = new Property(0, Long.class, "serverID", false, "SERVER_ID");
        public final static Property PlanServerID = new Property(1, Long.class, "planServerID", false, "PLAN_SERVER_ID");
        public final static Property PlanLocalID = new Property(2, Long.class, "planLocalID", false, "PLAN_LOCAL_ID");
        public final static Property SymbolServerID = new Property(3, Long.class, "symbolServerID", false, "SYMBOL_SERVER_ID");
        public final static Property SymbolLocalID = new Property(4, Long.class, "symbolLocalID", false, "SYMBOL_LOCAL_ID");
        public final static Property Position = new Property(5, Integer.class, "position", false, "POSITION");
        public final static Property IsSynchronized = new Property(6, Boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
        public final static Property Id = new Property(7, Long.class, "id", true, "_id");
    };


    public SymbolPlanDao(DaoConfig config) {
        super(config);
    }
    
    public SymbolPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYMBOL_PLAN' (" + //
                "'SERVER_ID' INTEGER," + // 0: serverID
                "'PLAN_SERVER_ID' INTEGER," + // 1: planServerID
                "'PLAN_LOCAL_ID' INTEGER," + // 2: planLocalID
                "'SYMBOL_SERVER_ID' INTEGER," + // 3: symbolServerID
                "'SYMBOL_LOCAL_ID' INTEGER," + // 4: symbolLocalID
                "'POSITION' INTEGER," + // 5: position
                "'IS_SYNCHRONIZED' INTEGER," + // 6: isSynchronized
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 7: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYMBOL_PLAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SymbolPlan entity) {
        stmt.clearBindings();
 
        Long serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(1, serverID);
        }
 
        Long planServerID = entity.getPlanServerID();
        if (planServerID != null) {
            stmt.bindLong(2, planServerID);
        }
 
        Long planLocalID = entity.getPlanLocalID();
        if (planLocalID != null) {
            stmt.bindLong(3, planLocalID);
        }
 
        Long symbolServerID = entity.getSymbolServerID();
        if (symbolServerID != null) {
            stmt.bindLong(4, symbolServerID);
        }
 
        Long symbolLocalID = entity.getSymbolLocalID();
        if (symbolLocalID != null) {
            stmt.bindLong(5, symbolLocalID);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(6, position);
        }
 
        Boolean isSynchronized = entity.getIsSynchronized();
        if (isSynchronized != null) {
            stmt.bindLong(7, isSynchronized ? 1l: 0l);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
    }    

    /** @inheritdoc */
    @Override
    public SymbolPlan readEntity(Cursor cursor, int offset) {
        SymbolPlan entity = new SymbolPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // serverID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // planServerID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // planLocalID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // symbolServerID
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // symbolLocalID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isSynchronized
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SymbolPlan entity, int offset) {
        entity.setServerID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanServerID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPlanLocalID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSymbolServerID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSymbolLocalID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsSynchronized(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SymbolPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SymbolPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
