package br.com.furb.tagarela.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import br.com.furb.tagarela.model.Observation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OBSERVATION.
*/
public class ObservationDao extends AbstractDao<Observation, Long> {

    public static final String TABLENAME = "OBSERVATION";

    /**
     * Properties of entity Observation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, java.util.Date.class, "date", false, "DATE");
        public final static Property Observation = new Property(1, String.class, "observation", false, "OBSERVATION");
        public final static Property ServerID = new Property(2, Long.class, "serverID", false, "SERVER_ID");
        public final static Property TutorID = new Property(3, Integer.class, "tutorID", false, "TUTOR_ID");
        public final static Property UserID = new Property(4, Integer.class, "userID", false, "USER_ID");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
        public final static Property IsSynchronized = new Property(6, Boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
    };


    public ObservationDao(DaoConfig config) {
        super(config);
    }
    
    public ObservationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'OBSERVATION' (" + //
                "'DATE' INTEGER," + // 0: date
                "'OBSERVATION' TEXT," + // 1: observation
                "'SERVER_ID' INTEGER," + // 2: serverID
                "'TUTOR_ID' INTEGER," + // 3: tutorID
                "'USER_ID' INTEGER," + // 4: userID
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 5: id
                "'IS_SYNCHRONIZED' INTEGER);"); // 6: isSynchronized
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'OBSERVATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Observation entity) {
        stmt.clearBindings();
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(1, date.getTime());
        }
 
        String observation = entity.getObservation();
        if (observation != null) {
            stmt.bindString(2, observation);
        }
 
        Long serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(3, serverID);
        }
 
        Integer tutorID = entity.getTutorID();
        if (tutorID != null) {
            stmt.bindLong(4, tutorID);
        }
 
        Integer userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(5, userID);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        Boolean isSynchronized = entity.getIsSynchronized();
        if (isSynchronized != null) {
            stmt.bindLong(7, isSynchronized ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    /** @inheritdoc */
    @Override
    public Observation readEntity(Cursor cursor, int offset) {
        Observation entity = new Observation( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // observation
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // serverID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tutorID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // userID
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isSynchronized
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Observation entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setObservation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServerID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTutorID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIsSynchronized(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Observation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Observation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
